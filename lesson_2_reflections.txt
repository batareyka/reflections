What happens when you initialize a repository? Why do you need to do it?
    
    When you initialize a repository, it becomes able to store metadata needed 
    for GIT's work. It is needed because you don't want Git to track every single 
    repository on your computer, so you need to tell it which ones to track.
    
How is the staging area different from the working directory and the repository?
What value do you think it offers?
    
    Staging area is temporary space when files that are going to be committed
    together are stored. Working directory and repository store files permanently.
    Staging area offers flexibility - you can choose how many files and changes are 
    going to be grouped in one commit in the repository.
    
How can you use the staging area to make sure you have one commit per logical
change?
    
    You can compare version of the file in staging area to the latest commit 
    to make sure that all your files have the right information in them.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    
    Branches are helpful when you want to have 2 or more working versions of 
    the program. Let's you switch between the versions and experiment without 
    the fear of messing up something that works.

How do the diagrams help you visualize the branch structure?
    
    Diagrams clearly show the commit when the split happens. Easy to see common 
    elements and the differences. Easy to spot potentially unreachable commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    
    The result is a new commit and a new version of the code which is combined 
    from two or more sources/branches. Diagram is a good way to present the result 
    of merging because it clearly shows which brunches commits belong to, so it's 
    easy to keep track of changes.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
    
    Automatic merging saves a lot of time but can sometimes merge code that can't 
    run together. But git is controlling this by alerting the user of potential conflicts. 
    Manual merging is likely less prone to logical errors, but is time consuming and 
    could cause manual errors.