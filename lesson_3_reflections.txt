When would you want to use a remote repository rather than keeping all your work local?

  When many people work on the same project or when you work on a project from several 
  devices and want to have access to the latest version of your work from any place.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?
  
  To make sure changes that are not ready to be public yet don't become public. To make sure 
  you share the right branch and not your experimental code.
  
Describe the differences between forks, clones, and branches. When would you use one instead of another?
  
  A branch exists in a git repository, it groups together certain commits. You would use a branch 
  when you want to work on an experimental feature or test something. You would also use it 
  if you want to have a version of your project that is different from the main version in production.
  Clone is a copy of a git repository. You would use clone when you need to have a copy of a git 
  repository from GitHub, someone else's computer or your own computer on your computer.
  Fork is like cloning a git repository, but the copying happens from someone's GitHub repository to 
  someone else's repository. You would do this when you want to use someone else's code but still want 
  to give them credit for original work.
  
What is the benefit of having a copy of the last known state of the remote stored locally?

  To make sure you incorporate other people's work (or your own work done from a different computer) 
  as soon as possible - easier to merge branches and resolve conflicts when there are fewer changes. 
  You can also push update to GitHub at any time since you are in sync.
  
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

  Send code over email back and forth... Would be harder to track different versions and easily revert 
  to them. Would be hard to work on the same project at the same time with other contributors. Would 
  be easier not to have to save your commits all the time and spend time on documenting what was changed.
  
When would you want to make changes in a separate branch rather than directly in master? What benefits 
does each approach have?

  When the change is substantial and risky, you want to make it in a separate branch to allow other 
  people to review and approve it before you add it to your master. Making a change directly in 
  mater requires much fewer steps in order to incorporate it. However, creating a separate branch 
  ensures that all the collaborators are aware of the change, they get a chance to reviw it and 
  leave their feedback.